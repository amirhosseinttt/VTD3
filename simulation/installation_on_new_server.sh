#!/bin/bash

# Check if running as root
if [ "$(id -u)" -ne 0 ]; then
    echo "This script must be run as root. Try with sudo."
    exit 1
fi

# run docker_installation script
docker_installation() {
    # Check if Docker is installed
    if ! command -v docker &> /dev/null
    then
        echo "Docker not found. Installing Docker..."
        # Install Docker
        curl -fsSL https://get.docker.com -o get-docker.sh
        sh get-docker.sh
        # Clean up installation script
        rm get-docker.sh
    else
        echo "Docker is already installed."
    fi

    # Add user to the docker group
    sudo usermod -aG docker $USER

    # Start Docker service
    sudo systemctl start docker

    # Enable Docker to start on boot
    sudo systemctl enable docker
}

# Run the docker installation function
docker_installation

# Check if Docker Compose is installed
if ! command -v docker-compose &> /dev/null
then
    echo "Docker Compose not found. Installing Docker Compose..."
    
    # Install Docker Compose (v2 is now part of Docker CLI as 'docker compose')
    # For standalone installation (older method):
    sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
    sudo chmod +x /usr/local/bin/docker-compose
    
    # Verify installation
    docker-compose --version
else
    echo "Docker Compose is already installed."
    docker-compose --version
fi

# exit if docker is not running
if ! systemctl is-active --quiet docker; then
    echo "Docker is not running. Please start Docker and run the script again."
    exit 1
fi



# change system's DNS to shecan

echo "Configuring system DNS to use Shecan servers..."

# Create a netplan configuration file for Shecan DNS
cat > /etc/netplan/99-shecan-dns.yaml << EOF
network:
  version: 2
  ethernets:
    # This applies to all ethernet devices
    default:
      renderer: networkd
      nameservers:
        addresses:
          - 178.22.122.100
          - 185.51.200.2
      dhcp4-overrides:
        use-dns: false
  wifis:
    # This applies to all wifi devices
    default:
      renderer: networkd
      nameservers:
        addresses:
          - 178.22.122.100
          - 185.51.200.2
      dhcp4-overrides:
        use-dns: false
EOF

# Apply the netplan configuration
echo "Applying netplan configuration..."
netplan apply

# Create a systemd-resolved configuration
cat > /etc/systemd/resolved.conf.d/shecan-dns.conf << EOF
[Resolve]
DNS=178.22.122.100 185.51.200.2
DNSStubListener=yes
EOF

# Create directory if it doesn't exist
mkdir -p /etc/systemd/resolved.conf.d/

# Restart systemd-resolved to apply changes
systemctl restart systemd-resolved

# Make /etc/resolv.conf immutable to prevent overrides
# First, make sure it has the right content
cat > /etc/resolv.conf << EOF
# Generated by shecan-dns script
nameserver 178.22.122.100
nameserver 185.51.200.2
EOF

# Make resolv.conf immutable
chattr +i /etc/resolv.conf

# Disable any potential interfering services
systemctl disable resolvconf.service 2>/dev/null || true
systemctl mask resolvconf.service 2>/dev/null || true

echo "DNS configuration has been set to Shecan servers and protected from overrides."
echo "Primary DNS: 178.22.122.100"
echo "Secondary DNS: 185.51.200.2"
echo ""
echo "To revert changes, run: chattr -i /etc/resolv.conf"

# Verify the DNS settings
echo "Verifying DNS settings:"
nslookup google.com